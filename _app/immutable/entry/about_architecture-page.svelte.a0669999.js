import{S as He,i as Ee,s as Ve,k as n,q as c,a as d,l as r,m as l,r as h,h as a,c as m,n as o,U as ke,p as _e,b as f,G as e,H as re}from"../chunks/index.90094d9d.js";import{b as le}from"../chunks/paths.e24d0b8a.js";function Ce(we){let S,q,T,y,L,I,p,v,z,B,g,D,N,x,A,ce,J,s,P,G,M,b,U,F,_,K,Q,w,R,W,H,X,Y,E,Z,$,V,ee,te,k,ae,se,C,ie,oe,j,ne;return{c(){S=n("title"),q=c("About Simulator Architecture"),T=d(),y=n("h1"),L=c("About Segmentation"),I=d(),p=n("div"),v=n("a"),z=c("Simulator"),B=d(),g=n("a"),D=c("About Segmenation"),N=d(),x=n("div"),A=n("img"),J=d(),s=n("main"),P=n("h2"),G=c("Segment"),M=d(),b=n("p"),U=c("Contains information about itself, information that is necessary for it to function in a Physical Address Space and a Virtual Address Space. Has one VAS and one PAS."),F=d(),_=n("h2"),K=c("Virtual Address Space"),Q=d(),w=n("p"),R=c("Contains information necessary for it to work inside of a Physical Address Space. Has methods to manage the Segments inside of it. Has one PAS and many Segments."),W=d(),H=n("h2"),X=c("Physical Address Space"),Y=d(),E=n("p"),Z=c("Contains information necessary for it to work inside a simulator. Has methods to manage segments and address spaces within it. Has many Virtual Address Spaces and Segments. Has one Simulator"),$=d(),V=n("h2"),ee=c("Simulator"),te=d(),k=n("p"),ae=c("Contains method to manage Physical Address Space, Virtual Address Spaces, and Segments. Before making any changes on segments, Virtual Address Space and Physical Address Space validation functions are called. Also provides logic to manage Virtual Address Spaces and the Physical Address Space and validate changes to them. Provides methods to turn a Physical Address Space into JSON and turn JSON back into a complete Physical Address Space. Simulator contains one Physical Address Space, which is provided to the visualization client."),se=d(),C=n("h2"),ie=c("Philosophy"),oe=d(),j=n("p"),ne=c("Logic for simulator and presentation are kept as separate as possible. The goal of this is to allow for the simulator code to be used and expanded on independently of any view code. This was chosen to try to make the Simulator more maintainable. All that must be done to switch out the view is to render the Physical Address Space and provide ways for a user to change the Physical Address Space and things it contains with the functions given in the simulator and reflect those changes in the rendering of the Physical Address Space"),this.h()},l(t){S=r(t,"TITLE",{});var u=l(S);q=h(u,"About Simulator Architecture"),u.forEach(a),T=m(t),y=r(t,"H1",{class:!0});var de=l(y);L=h(de,"About Segmentation"),de.forEach(a),I=m(t),p=r(t,"DIV",{class:!0});var O=l(p);v=r(O,"A",{href:!0,class:!0});var he=l(v);z=h(he,"Simulator"),he.forEach(a),B=m(O),g=r(O,"A",{href:!0,class:!0});var me=l(g);D=h(me,"About Segmenation"),me.forEach(a),O.forEach(a),N=m(t),x=r(t,"DIV",{class:!0});var ue=l(x);A=r(ue,"IMG",{src:!0,alt:!0,style:!0}),ue.forEach(a),J=m(t),s=r(t,"MAIN",{});var i=l(s);P=r(i,"H2",{class:!0});var pe=l(P);G=h(pe,"Segment"),pe.forEach(a),M=m(i),b=r(i,"P",{class:!0});var fe=l(b);U=h(fe,"Contains information about itself, information that is necessary for it to function in a Physical Address Space and a Virtual Address Space. Has one VAS and one PAS."),fe.forEach(a),F=m(i),_=r(i,"H2",{class:!0});var Se=l(_);K=h(Se,"Virtual Address Space"),Se.forEach(a),Q=m(i),w=r(i,"P",{class:!0});var Ae=l(w);R=h(Ae,"Contains information necessary for it to work inside of a Physical Address Space. Has methods to manage the Segments inside of it. Has one PAS and many Segments."),Ae.forEach(a),W=m(i),H=r(i,"H2",{class:!0});var ye=l(H);X=h(ye,"Physical Address Space"),ye.forEach(a),Y=m(i),E=r(i,"P",{class:!0});var ve=l(E);Z=h(ve,"Contains information necessary for it to work inside a simulator. Has methods to manage segments and address spaces within it. Has many Virtual Address Spaces and Segments. Has one Simulator"),ve.forEach(a),$=m(i),V=r(i,"H2",{class:!0});var ge=l(V);ee=h(ge,"Simulator"),ge.forEach(a),te=m(i),k=r(i,"P",{class:!0});var xe=l(k);ae=h(xe,"Contains method to manage Physical Address Space, Virtual Address Spaces, and Segments. Before making any changes on segments, Virtual Address Space and Physical Address Space validation functions are called. Also provides logic to manage Virtual Address Spaces and the Physical Address Space and validate changes to them. Provides methods to turn a Physical Address Space into JSON and turn JSON back into a complete Physical Address Space. Simulator contains one Physical Address Space, which is provided to the visualization client."),xe.forEach(a),se=m(i),C=r(i,"H2",{class:!0});var Pe=l(C);ie=h(Pe,"Philosophy"),Pe.forEach(a),oe=m(i),j=r(i,"P",{class:!0});var be=l(j);ne=h(be,"Logic for simulator and presentation are kept as separate as possible. The goal of this is to allow for the simulator code to be used and expanded on independently of any view code. This was chosen to try to make the Simulator more maintainable. All that must be done to switch out the view is to render the Physical Address Space and provide ways for a user to change the Physical Address Space and things it contains with the functions given in the simulator and reflect those changes in the rendering of the Physical Address Space"),be.forEach(a),i.forEach(a),this.h()},h(){o(y,"class","text-center text-5xl mb-2"),o(v,"href",le+"/"),o(v,"class","text-blue-500"),o(g,"href",le+"/about_segmentation"),o(g,"class","text-red-500"),o(p,"class","text-center font-bold mb-10"),ke(A.src,ce=le+"/simarch.png")||o(A,"src",ce),o(A,"alt",""),_e(A,"height","450px"),_e(A,"width","3/4"),o(x,"class","flex justify-center mb-2"),o(P,"class","text-4xl text-center"),o(b,"class","text-justify container mx-auto mb-4"),o(_,"class","text-4xl text-center"),o(w,"class","text-justify container mx-auto mb-4"),o(H,"class","text-4xl text-center"),o(E,"class","text-justify container mx-auto mb-4"),o(V,"class","text-4xl text-center"),o(k,"class","text-justify container mx-auto mb-4"),o(C,"class","text-4xl text-center"),o(j,"class","text-justify container mx-auto mb-4")},m(t,u){f(t,S,u),e(S,q),f(t,T,u),f(t,y,u),e(y,L),f(t,I,u),f(t,p,u),e(p,v),e(v,z),e(p,B),e(p,g),e(g,D),f(t,N,u),f(t,x,u),e(x,A),f(t,J,u),f(t,s,u),e(s,P),e(P,G),e(s,M),e(s,b),e(b,U),e(s,F),e(s,_),e(_,K),e(s,Q),e(s,w),e(w,R),e(s,W),e(s,H),e(H,X),e(s,Y),e(s,E),e(E,Z),e(s,$),e(s,V),e(V,ee),e(s,te),e(s,k),e(k,ae),e(s,se),e(s,C),e(C,ie),e(s,oe),e(s,j),e(j,ne)},p:re,i:re,o:re,d(t){t&&a(S),t&&a(T),t&&a(y),t&&a(I),t&&a(p),t&&a(N),t&&a(x),t&&a(J),t&&a(s)}}}class Ie extends He{constructor(S){super(),Ee(this,S,null,Ce,Ve,{})}}export{Ie as default};
